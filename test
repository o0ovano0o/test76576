<template>
  <div class="q-pa-md">
    <div class="wrapper">
      <q-input
        :value="value"
        filled
        style="flex: 1"
        @input="onChange"
        @blur="blur"
        @keydown="onKeyDown"
        ref="refInputNumber"
      />
      <div class="control">
        <button @mousedown="focus" @click="cong">
          <svg
            viewBox="64 64 896 896"
            focusable="false"
            data-icon="up"
            width="0.5em"
            height="0.5em"
            fill="currentColor"
            aria-hidden="true"
          >
            <path
              d="M890.5 755.3L537.9 269.2c-12.8-17.6-39-17.6-51.7 0L133.5 755.3A8 8 0 00140 768h75c5.1 0 9.9-2.5 12.9-6.6L512 369.8l284.1 391.6c3 4.1 7.8 6.6 12.9 6.6h75c6.5 0 10.3-7.4 6.5-12.7z"
            ></path>
          </svg>
        </button>
        <button @mousedown="focus"  @click="tru">
          <svg
            viewBox="64 64 896 896"
            focusable="false"
            data-icon="down"
            width="0.5em"
            height="0.5em"
            fill="currentColor"
            aria-hidden="true"
          >
            <path
              d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
            ></path>
          </svg>
        </button>
      </div>
    </div>
  </div>
</template>

<script lang="ts">
import { watch } from "fs";
import { Vue, Component, Prop, Watch } from "vue-property-decorator";

@Component
export default class InputNumber extends Vue {
  @Prop({ type: String, default: "" }) value!: string;

  onChange(value: string = "") {
    this.$emit("input", value.replace(/\./g, "").match(/.{1,3}/g).join("."));
  }

  blur() {
    console.log("blur");
  }

  focus() {
    setTimeout(() => {
      this.$refs.refInputNumber.focus();
    }, 0);
  }

  cong() {
    this.$emit("input", (Number(this.value.replace(/\./g, "")) + 1 + "")
      .match(/.{1,3}/g)
      .join("."))
  }
  tru() {
    this.$emit("input", (Number(this.value.replace(/\./g, "")) - 1 + "")
      .match(/.{1,3}/g)
      .join("."))
  }
  onKeyDown(key: { code: string }) {
    switch (key.code) {
      case "ArrowUp":
        this.cong();
        break;
      case "ArrowDown":
        this.tru();
        break;
      default:
        break;
    }
  }
}
</script>
<style>
.wrapper {
  position: relative;
  display: flex;
  align-items: center;
  max-width: 200px;
}
.control {
  position: absolute;
  right: 0;
  display: flex;
  flex-direction: column;
}
.wrapper .control {
  visibility: hidden;
}
.wrapper:hover .control {
  visibility: visible;
}
</style>
